!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADDRESS_HH	address.hh	4;"	d
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = $(CXX11_FLAGS)$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = $(PICKY_CXXFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_V_AR	Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
APACHE2	Makefile	/^APACHE2 = \/usr\/sbin\/apache2$/;"	m
APACHE2_INCLUDE	Makefile	/^APACHE2_INCLUDE = \/usr\/include\/apache2$/;"	m
APACHE2_MODULE_DIR	Makefile	/^APACHE2_MODULE_DIR = \/usr\/lib\/apache2\/modules$/;"	m
APXS	Makefile	/^APXS = \/usr\/bin\/apxs$/;"	m
AR	Makefile	/^AR = ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/missing automake-1.14$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
Action	poller.hh	/^        Action( FileDescriptor & s_fd,$/;"	f	struct:Poller::Action
Action	poller.hh	/^    struct Action$/;"	s	class:Poller
Address	address.cc	/^Address::Address( const raw & addr, const size_t size )$/;"	f	class:Address
Address	address.cc	/^Address::Address( const sockaddr & addr, const size_t size )$/;"	f	class:Address
Address	address.cc	/^Address::Address( const sockaddr_in & addr )$/;"	f	class:Address
Address	address.cc	/^Address::Address( const std::string & hostname, const std::string & service )$/;"	f	class:Address
Address	address.cc	/^Address::Address( const std::string & ip, const uint16_t port )$/;"	f	class:Address
Address	address.cc	/^Address::Address( const string & node, const string & service, const addrinfo & hints )$/;"	f	class:Address
Address	address.cc	/^Address::Address()$/;"	f	class:Address
Address	address.hh	/^class Address$/;"	c
BUFFER_SIZE	dns_proxy.cc	/^const static size_t BUFFER_SIZE = 1024 * 1024;$/;"	v	file:
BUFFER_SIZE	file_descriptor.hh	/^    const static size_t BUFFER_SIZE = 1024 * 1024;$/;"	m	class:FileDescriptor
BYTESTREAM_QUEUE_HH	bytestream_queue.hh	4;"	d
ByteStreamQueue	bytestream_queue.cc	/^ByteStreamQueue::ByteStreamQueue( const size_t size )$/;"	f	class:ByteStreamQueue
ByteStreamQueue	bytestream_queue.hh	/^class ByteStreamQueue$/;"	c
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CHILD_PROCESS_HH	child_process.hh	4;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXX11_FLAGS	Makefile	/^CXX11_FLAGS = -std=c++11 -pthread$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CallbackType	poller.hh	/^        typedef std::function<Result(void)> CallbackType;$/;"	t	struct:Poller::Action
ChildProcess	child_process.cc	/^ChildProcess::ChildProcess( ChildProcess && other )$/;"	f	class:ChildProcess
ChildProcess	child_process.cc	/^ChildProcess::ChildProcess( const string & name,$/;"	f	class:ChildProcess
ChildProcess	child_process.hh	/^class ChildProcess$/;"	c
Continue	poller.hh	/^            enum class Type { Continue, Exit, Cancel } result;$/;"	m	class:Poller::Action::Result::Type
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libutil_a_SOURCES)$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DNAT	nat.cc	/^DNAT::DNAT( const Address & listener, const string & interface )$/;"	f	class:DNAT
DNAT	nat.hh	/^class DNAT$/;"	c
DNSMASQ	Makefile	/^DNSMASQ = \/usr\/sbin\/dnsmasq$/;"	m
DNSProxy	dns_proxy.cc	/^DNSProxy::DNSProxy( const Address & listen_address, const Address & s_udp_target, const Address & s_tcp_target )$/;"	f	class:DNSProxy
DNSProxy	dns_proxy.hh	/^class DNSProxy$/;"	c
DNS_PROXY_HH	dns_proxy.hh	4;"	d
DNS_SERVER_HH	dns_server.hh	4;"	d
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
Direction	poller.hh	/^    typedef Poller::Action::PollDirection Direction;$/;"	t	namespace:PollerShortNames
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EVENT_LOOP_HH	event_loop.hh	4;"	d
EXCEPTION_HH	exception.hh	4;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EZIO_HH	ezio.hh	4;"	d
EventLoop	event_loop.cc	/^EventLoop::EventLoop()$/;"	f	class:EventLoop
EventLoop	event_loop.hh	/^class EventLoop$/;"	c
Exit	poller.hh	/^            enum class Type { Continue, Exit, Cancel } result;$/;"	m	class:Poller::Action::Result::Type
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FILE_DESCRIPTOR_HH	file_descriptor.hh	4;"	d
FileDescriptor	file_descriptor.cc	/^FileDescriptor::FileDescriptor( FileDescriptor && other )$/;"	f	class:FileDescriptor
FileDescriptor	file_descriptor.cc	/^FileDescriptor::FileDescriptor( const int fd )$/;"	f	class:FileDescriptor
FileDescriptor	file_descriptor.hh	/^class FileDescriptor$/;"	c
GET_ADDRESS_HH	interfaces.hh	4;"	d
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IP	Makefile	/^IP = \/sbin\/ip$/;"	m
IPTABLES	Makefile	/^IPTABLES = \/sbin\/iptables$/;"	m
Interfaces	interfaces.cc	/^Interfaces::Interfaces()$/;"	f	class:Interfaces
Interfaces	interfaces.hh	/^class Interfaces$/;"	c
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/missing makeinfo$/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NAT	nat.cc	/^NAT::NAT( const Address & ingress_addr )$/;"	f	class:NAT
NAT	nat.hh	/^class NAT$/;"	c
NATRule	nat.cc	/^NATRule::NATRule( const vector< string > & s_args )$/;"	f	class:NATRule
NATRule	nat.hh	/^class NATRule {$/;"	c
NAT_HH	nat.hh	4;"	d
NETDEVICE_HH	netdevice.hh	4;"	d
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
Out	poller.hh	/^        enum PollDirection : short { In = POLLIN, Out = POLLOUT } direction;$/;"	m	struct:Poller::Action	typeref:enum:Poller::Action::
PACKAGE	Makefile	/^PACKAGE = mahimahi$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = mahimahi@mit.edu$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = mahimahi$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = mahimahi 0.91$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = mahimahi$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.91$/;"	m
PANGOCAIRO_CFLAGS	Makefile	/^PANGOCAIRO_CFLAGS = -pthread -I\/usr\/include\/pango-1.0 -I\/usr\/include\/cairo -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include -I\/usr\/include\/pixman-1 -I\/usr\/include\/freetype2 -I\/usr\/include\/libpng12 $/;"	m
PANGOCAIRO_LIBS	Makefile	/^PANGOCAIRO_LIBS = -lpangocairo-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lcairo $/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PICKY_CXXFLAGS	Makefile	/^PICKY_CXXFLAGS = -pedantic -Wall -Wextra -Weffc++ -Werror$/;"	m
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
POLLER_HH	poller.hh	4;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROTOC	Makefile	/^PROTOC = \/usr\/bin\/protoc$/;"	m
Poller	poller.hh	/^    Poller() : actions_(), pollfds_() {}$/;"	f	class:Poller
Poller	poller.hh	/^class Poller$/;"	c
PollerShortNames	poller.hh	/^namespace PollerShortNames {$/;"	n
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
Result	bytestream_queue.hh	/^    enum class Result { Success, EndOfFile };$/;"	c	class:ByteStreamQueue
Result	poller.hh	/^            Result( const Type & s_result = Type::Continue, const unsigned int & s_status = EXIT_SUCCESS )$/;"	f	struct:Poller::Action::Result
Result	poller.hh	/^        Result( const Type & s_result, const unsigned int & s_status = EXIT_SUCCESS )$/;"	f	struct:Poller::Result
Result	poller.hh	/^        struct Result$/;"	s	struct:Poller::Action
Result	poller.hh	/^    struct Result$/;"	s	class:Poller
Result	poller.hh	/^    typedef Poller::Action::Result Result;$/;"	t	namespace:PollerShortNames
ResultType	poller.hh	/^    typedef Poller::Action::Result::Type ResultType;$/;"	t	namespace:PollerShortNames
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SIGNALFD_HH	signalfd.hh	4;"	d
SOCKETPAIR_HH	socketpair.hh	4;"	d
SOCKET_HH	socket.hh	4;"	d
SOURCES	Makefile	/^SOURCES = $(libutil_a_SOURCES)$/;"	m
STRIP	Makefile	/^STRIP = strip$/;"	m
SYSTEM_RUNNER_HH	system_runner.hh	2;"	d
SignalFD	signalfd.cc	/^SignalFD::SignalFD( const SignalMask & signals )$/;"	f	class:SignalFD
SignalFD	signalfd.hh	/^class SignalFD$/;"	c
SignalMask	signalfd.cc	/^SignalMask::SignalMask( const initializer_list< int > signals )$/;"	f	class:SignalMask
SignalMask	signalfd.hh	/^class SignalMask$/;"	c
Socket	socket.cc	/^Socket::Socket( FileDescriptor && fd, const int domain, const int type )$/;"	f	class:Socket
Socket	socket.cc	/^Socket::Socket( const int domain, const int type )$/;"	f	class:Socket
Socket	socket.hh	/^class Socket : public FileDescriptor$/;"	c
Success	bytestream_queue.hh	/^    enum class Result { Success, EndOfFile };$/;"	m	class:ByteStreamQueue::Result
Success	poller.hh	/^        enum class Type { Success, Timeout, Exit } result;$/;"	m	class:Poller::Result::Type
SystemCall	exception.hh	/^inline int SystemCall( const std::string & s_attempt, const int return_value )$/;"	f
TCPSocket	socket.hh	/^    TCPSocket( FileDescriptor && fd ) : Socket( std::move( fd ), AF_INET, SOCK_STREAM ) {}$/;"	f	class:TCPSocket
TCPSocket	socket.hh	/^    TCPSocket() : Socket( AF_INET, SOCK_STREAM ) {}$/;"	f	class:TCPSocket
TCPSocket	socket.hh	/^class TCPSocket : public Socket$/;"	c
TEMP_FILE_HH	temp_file.hh	4;"	d
TIMESTAMP_HH	timestamp.hh	4;"	d
TempFile	temp_file.hh	/^    TempFile( TempFile && other ) : UniqueFile( std::move( other ) ) {}$/;"	f	class:TempFile
TempFile	temp_file.hh	/^class TempFile : public UniqueFile$/;"	c
TemporarilyUnprivileged	util.cc	/^TemporarilyUnprivileged::TemporarilyUnprivileged()$/;"	f	class:TemporarilyUnprivileged
TemporarilyUnprivileged	util.hh	/^class TemporarilyUnprivileged {$/;"	c
Timeout	poller.hh	/^        enum class Type { Success, Timeout, Exit } result;$/;"	m	class:Poller::Result::Type
TunDevice	netdevice.cc	/^TunDevice::TunDevice( const string & name,$/;"	f	class:TunDevice
TunDevice	netdevice.hh	/^class TunDevice : public FileDescriptor$/;"	c
Type	poller.hh	/^            enum class Type { Continue, Exit, Cancel } result;$/;"	c	struct:Poller::Action::Result
Type	poller.hh	/^        enum class Type { Success, Timeout, Exit } result;$/;"	c	struct:Poller::Result
UDPSocket	socket.hh	/^    UDPSocket() : Socket( AF_INET, SOCK_DGRAM ) {}$/;"	f	class:UDPSocket
UDPSocket	socket.hh	/^class UDPSocket : public Socket$/;"	c
UTIL_HH	util.hh	4;"	d
UniqueFile	temp_file.cc	/^UniqueFile::UniqueFile( UniqueFile && other )$/;"	f	class:UniqueFile
UniqueFile	temp_file.cc	/^UniqueFile::UniqueFile( const string & filename_template )$/;"	f	class:UniqueFile
UniqueFile	temp_file.hh	/^class UniqueFile$/;"	c
UnixDomainSocket	socketpair.hh	/^    UnixDomainSocket( const int s_fd ) : FileDescriptor( s_fd ) {}$/;"	f	class:UnixDomainSocket
UnixDomainSocket	socketpair.hh	/^class UnixDomainSocket : public FileDescriptor$/;"	c
VERSION	Makefile	/^VERSION = 0.91$/;"	m
VirtualEthernetPair	netdevice.cc	/^VirtualEthernetPair::VirtualEthernetPair( const string & outside_name, const string & inside_name )$/;"	f	class:VirtualEthernetPair
VirtualEthernetPair	netdevice.hh	/^class VirtualEthernetPair$/;"	c
XCBPRESENT_CFLAGS	Makefile	/^XCBPRESENT_CFLAGS = $/;"	m
XCBPRESENT_LIBS	Makefile	/^XCBPRESENT_LIBS = -lxcb-present -lxcb $/;"	m
abs_builddir	Makefile	/^abs_builddir = \/home\/greg\/Desktop\/mahimahi\/src\/util$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/greg\/Desktop\/mahimahi\/src\/util$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/greg\/Desktop\/mahimahi$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/greg\/Desktop\/mahimahi$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
accept	socket.cc	/^TCPSocket TCPSocket::accept( void )$/;"	f	class:TCPSocket
actions_	poller.hh	/^    std::vector< Action > actions_;$/;"	m	class:Poller
active	poller.hh	/^        bool active;$/;"	m	struct:Poller::Action
add_action	event_loop.hh	/^    void add_action( Poller::Action action ) { poller_.add_action( action ); }$/;"	f	class:EventLoop
add_action	poller.cc	/^void Poller::add_action( Poller::Action action )$/;"	f	class:Poller
add_address	interfaces.cc	/^void Interfaces::add_address( const Address & addr )$/;"	f	class:Interfaces
add_child_process	event_loop.hh	/^    void add_child_process( Targs&&... Fargs )$/;"	f	class:EventLoop
add_simple_input_handler	event_loop.cc	/^void EventLoop::add_simple_input_handler( FileDescriptor & fd,$/;"	f	class:EventLoop
addr_	address.hh	/^    raw addr_;$/;"	m	class:Address
address_in_use	interfaces.cc	/^bool Interfaces::address_in_use( const Address & addr ) const$/;"	f	class:Interfaces
addresses_in_use_	interfaces.hh	/^    std::vector< Address > addresses_in_use_;$/;"	m	class:Interfaces
all_nameservers	util.cc	/^vector< Address > all_nameservers( void )$/;"	f
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am_libutil_a_OBJECTS	Makefile	/^am_libutil_a_OBJECTS = ezio.$(OBJEXT) file_descriptor.$(OBJEXT) \\$/;"	m
arguments	nat.hh	/^    std::vector< std::string > arguments;$/;"	m	class:NATRule
as_sockaddr	address.hh	/^        sockaddr as_sockaddr;$/;"	m	union:Address::__anon1
as_sockaddr_storage	address.hh	/^        sockaddr_storage as_sockaddr_storage;$/;"	m	union:Address::__anon1
assert_not_root	util.cc	/^void assert_not_root( void )$/;"	f
assign_address	netdevice.cc	/^void assign_address( const string & device_name, const Address & addr, const Address & peer )$/;"	f
attempt_and_error_	exception.hh	/^    std::string attempt_and_error_;$/;"	m	class:tagged_error
available_to_pop	bytestream_queue.cc	/^size_t ByteStreamQueue::available_to_pop( void ) const$/;"	f	class:ByteStreamQueue
available_to_push	bytestream_queue.cc	/^size_t ByteStreamQueue::available_to_push( void ) const$/;"	f	class:ByteStreamQueue
bind	socket.cc	/^void Socket::bind( const Address & address )$/;"	f	class:Socket
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
buffer_	bytestream_queue.hh	/^    std::string buffer_;$/;"	m	class:ByteStreamQueue
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
callback	poller.hh	/^        CallbackType callback;$/;"	m	struct:Poller::Action
cgnat	address.cc	/^Address Address::cgnat( const uint8_t last_octet )$/;"	f	class:Address
check_requirements	util.cc	/^void check_requirements( const int argc, const char * const argv[] )$/;"	f
child_processes_	event_loop.hh	/^    std::vector<ChildProcess> child_processes_;$/;"	m	class:EventLoop
connect	socket.cc	/^void Socket::connect( const Address & address )$/;"	f	class:Socket
current_mask	signalfd.cc	/^SignalMask SignalMask::current_mask( void )$/;"	f	class:SignalMask
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
died_on_signal	child_process.hh	/^    bool died_on_signal( void ) const { assert( not moved_away_ ); assert( terminated_ ); return died_on_signal_; }$/;"	f	class:ChildProcess
died_on_signal_	child_process.hh	/^    bool died_on_signal_;$/;"	m	class:ChildProcess
do_clone	child_process.cc	/^int do_clone( const bool new_namespace )$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
drop_privileges	util.cc	/^void drop_privileges( void ) {$/;"	f
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
eof	bytestream_queue.cc	/^bool eof( const ByteStreamQueue::Result & r )$/;"	f
eof	file_descriptor.hh	/^    const bool & eof( void ) const { return eof_; }$/;"	f	class:FileDescriptor
eof_	file_descriptor.hh	/^    bool eof_;$/;"	m	class:FileDescriptor
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exit_status	child_process.hh	/^    int exit_status( void ) const { assert( not moved_away_ ); assert( terminated_ ); return exit_status_; }$/;"	f	class:ChildProcess
exit_status	poller.hh	/^            unsigned int exit_status;$/;"	m	struct:Poller::Action::Result
exit_status	poller.hh	/^        unsigned int exit_status;$/;"	m	struct:Poller::Result
exit_status_	child_process.hh	/^    int exit_status_;$/;"	m	class:ChildProcess
ezexec	system_runner.cc	/^int ezexec( const vector< string > & command, const bool path_search )$/;"	f
fd	poller.hh	/^        FileDescriptor & fd;$/;"	m	struct:Poller::Action
fd	signalfd.hh	/^    FileDescriptor & fd( void ) { return fd_; }$/;"	f	class:SignalFD
fd	temp_file.hh	/^    FileDescriptor & fd( void ) { return fd_; }$/;"	f	class:UniqueFile
fd_	file_descriptor.hh	/^    int fd_;$/;"	m	class:FileDescriptor
fd_	signalfd.hh	/^    FileDescriptor fd_;$/;"	m	class:SignalFD
fd_	temp_file.hh	/^    FileDescriptor fd_;$/;"	m	class:UniqueFile
fd_num	file_descriptor.hh	/^    const int & fd_num( void ) const { return fd_; }$/;"	f	class:FileDescriptor
first_nameserver	util.cc	/^Address first_nameserver( void )$/;"	f
first_unassigned_address	interfaces.cc	/^pair< Address, uint16_t > Interfaces::first_unassigned_address( uint16_t last_octet ) const$/;"	f	class:Interfaces
gai_error_category	address.cc	/^class gai_error_category : public error_category$/;"	c	file:
get_address	socket.cc	/^Address Socket::get_address( const std::string & name_of_function,$/;"	f	class:Socket
get_working_directory	util.cc	/^string get_working_directory( void )$/;"	f
getsockopt	socket.cc	/^socklen_t Socket::getsockopt( const int level, const int option, option_type & option_value ) const$/;"	f	class:Socket
graceful_termination_signal_	child_process.hh	/^    int graceful_termination_signal_;$/;"	m	class:ChildProcess
handle_signal	event_loop.cc	/^Result EventLoop::handle_signal( const signalfd_siginfo & sig )$/;"	f	class:EventLoop
handle_tcp	dns_proxy.cc	/^void DNSProxy::handle_tcp( void )$/;"	f	class:DNSProxy
handle_udp	dns_proxy.cc	/^void DNSProxy::handle_udp( void )$/;"	f	class:DNSProxy
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initial_timestamp	timestamp.cc	/^uint64_t initial_timestamp( void )$/;"	f
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/greg\/Desktop\/mahimahi\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
interface_ioctl	netdevice.cc	/^void interface_ioctl( FileDescriptor & fd, const int request,$/;"	f
interface_ioctl	netdevice.cc	/^void interface_ioctl( const int request,$/;"	f
internal_loop	event_loop.cc	/^int EventLoop::internal_loop( const std::function<int(void)> & wait_time )$/;"	f	class:EventLoop
ip	address.hh	/^    std::string ip( void ) const { return ip_port().first; }$/;"	f	class:Address
ip_port	address.cc	/^pair<string, uint16_t> Address::ip_port( void ) const$/;"	f	class:Address
join	util.cc	/^string join( const vector< string > & command )$/;"	f
kernel_will_destroy_	netdevice.hh	/^    bool kernel_will_destroy_;$/;"	m	class:VirtualEthernetPair
libapr1_CFLAGS	Makefile	/^libapr1_CFLAGS = -DLINUX -D_REENTRANT -D_GNU_SOURCE -I\/usr\/include\/apr-1.0 $/;"	m
libapr1_LIBS	Makefile	/^libapr1_LIBS = -lapr-1 $/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libssl_CFLAGS	Makefile	/^libssl_CFLAGS = $/;"	m
libssl_LIBS	Makefile	/^libssl_LIBS = -lcrypto -lssl -lcrypto $/;"	m
libutil_a_AR	Makefile	/^libutil_a_AR = $(AR) $(ARFLAGS)$/;"	m
libutil_a_LIBADD	Makefile	/^libutil_a_LIBADD =$/;"	m
libutil_a_OBJECTS	Makefile	/^libutil_a_OBJECTS = $(am_libutil_a_OBJECTS)$/;"	m
libutil_a_SOURCES	Makefile	/^libutil_a_SOURCES = exception.hh ezio.cc ezio.hh                               \\$/;"	m
list_directory_contents	util.cc	/^vector< string > list_directory_contents( const string & dir )$/;"	f
listen	socket.cc	/^void TCPSocket::listen( const int backlog )$/;"	f	class:TCPSocket
local_address	socket.cc	/^Address Socket::local_address( void ) const$/;"	f	class:Socket
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
loop	event_loop.hh	/^    int loop( void ) { return internal_loop( [] () { return -1; } ); } \/* no timeout *\/$/;"	f	class:EventLoop
make_directory	util.cc	/^void make_directory( const string & directory )$/;"	f
make_pair	socketpair.cc	/^pair<UnixDomainSocket, UnixDomainSocket> UnixDomainSocket::make_pair( void )$/;"	f	class:UnixDomainSocket
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mask	signalfd.hh	/^    const sigset_t & mask( void ) const { return mask_; }$/;"	f	class:SignalMask
mask_	signalfd.hh	/^    sigset_t mask_;$/;"	m	class:SignalMask
maybe_proxy	dns_proxy.cc	/^unique_ptr<DNSProxy> DNSProxy::maybe_proxy( const Address & listen_address, const Address & s_udp_target, const Address & s_tcp_target )$/;"	f	class:DNSProxy
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
moved_away_	child_process.hh	/^    bool moved_away_;$/;"	m	class:ChildProcess
moved_away_	temp_file.hh	/^    bool moved_away_;$/;"	m	class:UniqueFile
mutable_temp_filename_	temp_file.hh	/^    std::vector<char> mutable_temp_filename_;$/;"	m	class:UniqueFile
myatof	ezio.cc	/^double myatof( const string & str )$/;"	f
myatoi	ezio.cc	/^long int myatoi( const string & str, const int base )$/;"	f
name	child_process.hh	/^    const std::string & name( void ) const { assert( not moved_away_ ); return name_; }$/;"	f	class:ChildProcess
name	temp_file.cc	/^string UniqueFile::name( void ) const$/;"	f	class:UniqueFile
name_	child_process.hh	/^    std::string name_;$/;"	m	class:ChildProcess
name_	netdevice.hh	/^    std::string name_;$/;"	m	class:VirtualEthernetPair
name_check	netdevice.cc	/^void name_check( const string & str )$/;"	f
next_byte_to_pop	bytestream_queue.hh	/^    size_t next_byte_to_push, next_byte_to_pop;$/;"	m	class:ByteStreamQueue
next_byte_to_push	bytestream_queue.hh	/^    size_t next_byte_to_push, next_byte_to_pop;$/;"	m	class:ByteStreamQueue
noinst_LIBRARIES	Makefile	/^noinst_LIBRARIES = libutil.a$/;"	m
non_empty	bytestream_queue.hh	/^    const std::function<bool(void)> non_empty;$/;"	m	class:ByteStreamQueue
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
operator <	address.cc	/^bool Address::operator<( const Address & other ) const$/;"	f	class:Address
operator ==	address.cc	/^bool Address::operator==( const Address & other ) const$/;"	f	class:Address
operator ==	signalfd.cc	/^bool SignalMask::operator==( const SignalMask & other ) const$/;"	f	class:SignalMask
orig_egid	util.hh	/^    const gid_t orig_egid;$/;"	m	class:TemporarilyUnprivileged
orig_euid	util.hh	/^    const uid_t orig_euid;$/;"	m	class:TemporarilyUnprivileged
original_dest	socket.cc	/^Address TCPSocket::original_dest( void ) const$/;"	f	class:TCPSocket
other	child_process.hh	/^    ChildProcess & operator=( ChildProcess && other ) = delete;$/;"	m	class:ChildProcess
other	child_process.hh	/^    ChildProcess & operator=( const ChildProcess & other ) = delete;$/;"	m	class:ChildProcess
other	child_process.hh	/^    ChildProcess( const ChildProcess & other ) = delete;$/;"	m	class:ChildProcess
other	file_descriptor.hh	/^    FileDescriptor( const FileDescriptor & other ) = delete;$/;"	m	class:FileDescriptor
other	file_descriptor.hh	/^    const FileDescriptor & operator=( const FileDescriptor & other ) = delete;$/;"	m	class:FileDescriptor
other	nat.hh	/^    NATRule( const NATRule & other ) = delete;$/;"	m	class:NATRule
other	nat.hh	/^    const NATRule & operator=( const NATRule & other ) = delete;$/;"	m	class:NATRule
other	temp_file.hh	/^    UniqueFile & operator=( UniqueFile && other ) = delete;$/;"	m	class:UniqueFile
other	temp_file.hh	/^    UniqueFile & operator=( const UniqueFile & other ) = delete;$/;"	m	class:UniqueFile
other	temp_file.hh	/^    UniqueFile( const UniqueFile & other ) = delete;$/;"	m	class:UniqueFile
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
peer_address	socket.cc	/^Address Socket::peer_address( void ) const$/;"	f	class:Socket
pid	child_process.hh	/^    pid_t pid( void ) const { assert( not moved_away_ ); return pid_; }$/;"	f	class:ChildProcess
pid_	child_process.hh	/^    pid_t pid_;$/;"	m	class:ChildProcess
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/mahimahi$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/mahimahi$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/mahimahi$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/mahimahi$/;"	m
poll	poller.cc	/^Poller::Result Poller::poll( const int & timeout_ms )$/;"	f	class:Poller
poller_	event_loop.hh	/^    Poller poller_;$/;"	m	class:EventLoop
pollfds_	poller.hh	/^    std::vector< pollfd > pollfds_;$/;"	m	class:Poller
pop	bytestream_queue.cc	/^void ByteStreamQueue::pop( FileDescriptor & fd )$/;"	f	class:ByteStreamQueue
port	address.hh	/^    uint16_t port( void ) const { return ip_port().second; }$/;"	f	class:Address
post_	nat.hh	/^    NATRule pre_, post_;$/;"	m	class:NAT
pre_	nat.hh	/^    NATRule pre_, post_;$/;"	m	class:NAT
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prepend_shell_prefix	util.cc	/^void prepend_shell_prefix( const string & str )$/;"	f
print_exception	exception.hh	/^inline void print_exception( const std::exception & e, std::ostream & output = std::cerr )$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
protobuf_CFLAGS	Makefile	/^protobuf_CFLAGS = -pthread $/;"	m
protobuf_LIBS	Makefile	/^protobuf_LIBS = -lprotobuf -pthread -lpthread $/;"	m
psdir	Makefile	/^psdir = ${docdir}$/;"	m
push	bytestream_queue.cc	/^ByteStreamQueue::Result ByteStreamQueue::push( FileDescriptor & fd )$/;"	f	class:ByteStreamQueue
raw	address.hh	/^    } raw;$/;"	t	class:Address	typeref:union:Address::__anon1
raw_timestamp	timestamp.cc	/^uint64_t raw_timestamp( void )$/;"	f
read	file_descriptor.cc	/^string FileDescriptor::read( const size_t limit )$/;"	f	class:FileDescriptor
read_count	file_descriptor.hh	/^    unsigned int read_count( void ) const { return read_count_; }$/;"	f	class:FileDescriptor
read_count_	file_descriptor.hh	/^    unsigned int read_count_, write_count_;$/;"	m	class:FileDescriptor
read_signal	signalfd.cc	/^signalfd_siginfo SignalFD::read_signal( void )$/;"	f	class:SignalFD
recv_fd	socketpair.cc	/^FileDescriptor UnixDomainSocket::recv_fd( void )$/;"	f	class:UnixDomainSocket
recvfrom	socket.cc	/^pair<Address, string> UDPSocket::recvfrom( void )$/;"	f	class:UDPSocket
register_handlers	dns_proxy.cc	/^void DNSProxy::register_handlers( EventLoop & event_loop )$/;"	f	class:DNSProxy
register_read	file_descriptor.hh	/^    void register_read( void ) { read_count_++; }$/;"	f	class:FileDescriptor
register_write	file_descriptor.hh	/^    void register_write( void ) { write_count_++; }$/;"	f	class:FileDescriptor
result	poller.hh	/^            enum class Type { Continue, Exit, Cancel } result;$/;"	m	struct:Poller::Action::Result	typeref:class:Poller::Action::Result::Type
result	poller.hh	/^        enum class Type { Success, Timeout, Exit } result;$/;"	m	struct:Poller::Result	typeref:class:Poller::Result::Type
resume	child_process.cc	/^void ChildProcess::resume( void )$/;"	f	class:ChildProcess
rule_	nat.hh	/^    NATRule rule_;$/;"	m	class:DNAT
run	system_runner.cc	/^void run( const vector< string > & command )$/;"	f
running	child_process.hh	/^    bool running( void ) const { assert( not moved_away_ ); return running_; }$/;"	f	class:ChildProcess
running_	child_process.hh	/^    bool running_, terminated_;$/;"	m	class:ChildProcess
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
send	socket.cc	/^void UDPSocket::send( const string & payload )$/;"	f	class:UDPSocket
send_fd	socketpair.cc	/^void UnixDomainSocket::send_fd( FileDescriptor & fd )$/;"	f	class:UnixDomainSocket
sendto	socket.cc	/^void UDPSocket::sendto( const Address & destination, const string & payload )$/;"	f	class:UDPSocket
service_count	poller.cc	/^unsigned int Poller::Action::service_count( void ) const$/;"	f	class:Poller::Action
set_as_mask	signalfd.cc	/^void SignalMask::set_as_mask( void ) const$/;"	f	class:SignalMask
set_eof	file_descriptor.hh	/^    void set_eof( void ) { eof_ = true; }$/;"	f	class:FileDescriptor
set_kernel_will_destroy	netdevice.hh	/^    void set_kernel_will_destroy( void ) { kernel_will_destroy_ = true; }$/;"	f	class:VirtualEthernetPair
set_reuseaddr	socket.cc	/^void Socket::set_reuseaddr( void )$/;"	f	class:Socket
set_timestamps	socket.cc	/^void UDPSocket::set_timestamps( void )$/;"	f	class:UDPSocket
setsockopt	socket.cc	/^void Socket::setsockopt( const int level, const int option, const option_type & option_value )$/;"	f	class:Socket
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shell_path	util.cc	/^string shell_path( void )$/;"	f
signal	child_process.cc	/^void ChildProcess::signal( const int sig )$/;"	f	class:ChildProcess
signals_	event_loop.hh	/^    SignalMask signals_;$/;"	m	class:EventLoop
size	address.hh	/^    socklen_t size( void ) const { return size_; }$/;"	f	class:Address
size_	address.hh	/^    socklen_t size_;$/;"	m	class:Address
space_available	bytestream_queue.hh	/^    const std::function<bool(void)> space_available;$/;"	m	class:ByteStreamQueue
srcdir	Makefile	/^srcdir = .$/;"	m
start_dnsmasq	dns_server.cc	/^ChildProcess start_dnsmasq( const vector< string > & extra_arguments )$/;"	f
str	address.cc	/^string Address::str( const string port_separator ) const$/;"	f	class:Address
subdir	Makefile	/^subdir = src\/util$/;"	m
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tagged_error	exception.hh	/^    tagged_error( const std::error_category & category,$/;"	f	class:tagged_error
tagged_error	exception.hh	/^class tagged_error : public std::system_error$/;"	c
target_alias	Makefile	/^target_alias = $/;"	m
tcp_listener	dns_proxy.hh	/^    TCPSocket & tcp_listener( void ) { return tcp_listener_; }$/;"	f	class:DNSProxy
tcp_listener_	dns_proxy.hh	/^    TCPSocket tcp_listener_;$/;"	m	class:DNSProxy
tcp_target_	dns_proxy.hh	/^    Address udp_target_, tcp_target_;$/;"	m	class:DNSProxy
terminated	child_process.hh	/^    bool terminated( void ) const { assert( not moved_away_ ); return terminated_; }$/;"	f	class:ChildProcess
terminated_	child_process.hh	/^    bool running_, terminated_;$/;"	m	class:ChildProcess
throw_exception	child_process.cc	/^void ChildProcess::throw_exception( void ) const$/;"	f	class:ChildProcess
timestamp	timestamp.cc	/^uint64_t timestamp( void )$/;"	f
to_mutable	temp_file.cc	/^vector<char> to_mutable( const string & str )$/;"	f
to_sockaddr	address.cc	/^const sockaddr & Address::to_sockaddr( void ) const$/;"	f	class:Address
top_build_prefix	Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..\/..$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
two_unassigned_addresses	interfaces.cc	/^std::pair< Address, Address > two_unassigned_addresses( const Address & avoid )$/;"	f
udp_listener	dns_proxy.hh	/^    UDPSocket & udp_listener( void ) { return udp_listener_; }$/;"	f	class:DNSProxy
udp_listener_	dns_proxy.hh	/^    UDPSocket udp_listener_;$/;"	m	class:DNSProxy
udp_target_	dns_proxy.hh	/^    Address udp_target_, tcp_target_;$/;"	m	class:DNSProxy
unix_error	exception.hh	/^    unix_error( const std::string & s_attempt,$/;"	f	class:unix_error
unix_error	exception.hh	/^class unix_error : public tagged_error$/;"	c
wait	child_process.cc	/^void ChildProcess::wait( const bool nonblocking )$/;"	f	class:ChildProcess
waitable	child_process.cc	/^bool ChildProcess::waitable( void ) const$/;"	f	class:ChildProcess
when_interested	poller.hh	/^        std::function<bool(void)> when_interested;$/;"	m	struct:Poller::Action
write	file_descriptor.cc	/^string::const_iterator FileDescriptor::write( const std::string & buffer, const bool write_all )$/;"	f	class:FileDescriptor
write	file_descriptor.cc	/^string::const_iterator FileDescriptor::write( const string::const_iterator & begin,$/;"	f	class:FileDescriptor
write	temp_file.cc	/^void UniqueFile::write( const string & contents )$/;"	f	class:UniqueFile
write_count	file_descriptor.hh	/^    unsigned int write_count( void ) const { return write_count_; }$/;"	f	class:FileDescriptor
write_count_	file_descriptor.hh	/^    unsigned int read_count_, write_count_;$/;"	m	class:FileDescriptor
zero	util.hh	/^template <typename T> void zero( T & x ) { memset( &x, 0, sizeof( x ) ); }$/;"	f
~ChildProcess	child_process.cc	/^ChildProcess::~ChildProcess()$/;"	f	class:ChildProcess
~EventLoop	event_loop.hh	/^    virtual ~EventLoop() {}$/;"	f	class:EventLoop
~FileDescriptor	file_descriptor.cc	/^FileDescriptor::~FileDescriptor()$/;"	f	class:FileDescriptor
~NATRule	nat.cc	/^NATRule::~NATRule()$/;"	f	class:NATRule
~TempFile	temp_file.cc	/^TempFile::~TempFile()$/;"	f	class:TempFile
~TemporarilyUnprivileged	util.cc	/^TemporarilyUnprivileged::~TemporarilyUnprivileged()$/;"	f	class:TemporarilyUnprivileged
~UniqueFile	temp_file.hh	/^    virtual ~UniqueFile() {}$/;"	f	class:UniqueFile
~VirtualEthernetPair	netdevice.cc	/^VirtualEthernetPair::~VirtualEthernetPair()$/;"	f	class:VirtualEthernetPair
